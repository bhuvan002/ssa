/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,27],$Vf=[4,7,9,11,19,73],$Vg=[4,7,9,11,19,73,80,81,82,83,84,85,86,87,88,89,93,94],$Vh=[7,9,11,19,59,73,80,81,82,83,84,85,86,87,88,89,93,94,104],$Vi=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,80,81,82,83,84,85,86,87,88,89,93,94,104,106,115,117,118,119,120],$Vj=[1,72],$Vk=[1,73],$Vl=[1,74],$Vm=[1,75],$Vn=[1,59],$Vo=[1,60],$Vp=[1,62],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,47],$Vx=[1,49],$Vy=[1,50],$Vz=[1,51],$VA=[1,52],$VB=[1,53],$VC=[1,4,5,6,7,16,17,23,25,26,27,28,29,30,73,104,106,115,116,117,118,119,120],$VD=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,104,106,115,117,118,119,120],$VE=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,104,106,115,116,117,118,119,120],$VF=[1,106],$VG=[9,12,19,57,73],$VH=[9,12,19,57,73,106],$VI=[9,12,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$VJ=[2,27],$VK=[9,12,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,73,106],$VL=[1,134],$VM=[9,12,19,54,56,57,73,106],$VN=[1,139],$VO=[7,9,11,12,14,15,16,17,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,73,106],$VP=[4,5,6,7,16,17,23,25,26,27,28,29,30],$VQ=[9,12,19,52,54,56,57,73,106],$VR=[1,140],$VS=[9,12,19,50,52,54,56,57,73,106],$VT=[1,146],$VU=[9,12,19,48,50,52,54,56,57,73,106],$VV=[1,147],$VW=[9,12,19,25,48,50,52,54,56,57,73,106],$VX=[1,148],$VY=[1,149],$VZ=[9,12,19,25,44,45,48,50,52,54,56,57,73,106],$V_=[1,150],$V$=[1,151],$V01=[1,152],$V11=[1,153],$V21=[9,12,19,25,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$V31=[1,154],$V41=[1,155],$V51=[9,12,19,25,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$V61=[1,156],$V71=[1,157],$V81=[9,12,19,25,27,28,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$V91=[1,158],$Va1=[1,159],$Vb1=[1,160],$Vc1=[19,73],$Vd1=[9,19],$Ve1=[1,172],$Vf1=[1,173],$Vg1=[1,194],$Vh1=[7,9,11],$Vi1=[1,215],$Vj1=[1,222],$Vk1=[19,73,106],$Vl1=[7,9,11,19],$Vm1=[19,106];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"CONSTANT":5,"STRING":6,"(":7,"expression":8,")":9,"postfix_expression":10,"[":11,"]":12,"argument_expression_list":13,".":14,"PTR_OP":15,"INC_OP":16,"DEC_OP":17,"assignment_expression":18,",":19,"unary_expression":20,"unary_operator":21,"cast_expression":22,"SIZEOF":23,"type_name":24,"&":25,"*":26,"+":27,"-":28,"~":29,"!":30,"multiplicative_expression":31,"/":32,"%":33,"additive_expression":34,"shift_expression":35,"LEFT_OP":36,"RIGHT_OP":37,"relational_expression":38,"<":39,">":40,"LE_OP":41,"GE_OP":42,"equality_expression":43,"EQ_OP":44,"NE_OP":45,"and_expression":46,"exclusive_or_expression":47,"^":48,"inclusive_or_expression":49,"|":50,"logical_and_expression":51,"AND_OP":52,"logical_or_expression":53,"OR_OP":54,"conditional_expression":55,"?":56,":":57,"assignment_operator":58,"=":59,"MUL_ASSIGN":60,"DIV_ASSIGN":61,"MOD_ASSIGN":62,"ADD_ASSIGN":63,"SUB_ASSIGN":64,"LEFT_ASSIGN":65,"RIGHT_ASSIGN":66,"AND_ASSIGN":67,"XOR_ASSIGN":68,"OR_ASSIGN":69,"constant_expression":70,"declaration":71,"declaration_specifiers":72,";":73,"init_declarator_list":74,"type_specifier":75,"type_qualifier":76,"init_declarator":77,"declarator":78,"initializer":79,"VOID":80,"CHAR":81,"SHORT":82,"INT":83,"LONG":84,"FLOAT":85,"DOUBLE":86,"SIGNED":87,"UNSIGNED":88,"TYPE_NAME":89,"specifier_qualifier_list":90,"enumerator_list":91,"enumerator":92,"CONST":93,"VOLATILE":94,"direct_declarator":95,"parameter_type_list":96,"identifier_list":97,"type_qualifier_list":98,"parameter_list":99,"ELLIPSIS":100,"parameter_declaration":101,"abstract_declarator":102,"direct_abstract_declarator":103,"{":104,"initializer_list":105,"}":106,"statement":107,"compound_statement":108,"expression_statement":109,"selection_statement":110,"iteration_statement":111,"jump_statement":112,"statement_list":113,"declaration_list":114,"IF":115,"ELSE":116,"WHILE":117,"CONTINUE":118,"BREAK":119,"RETURN":120,"translation_unit":121,"external_declaration":122,"function_definition":123,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",5:"CONSTANT",6:"STRING",7:"(",9:")",11:"[",12:"]",14:".",15:"PTR_OP",16:"INC_OP",17:"DEC_OP",19:",",23:"SIZEOF",25:"&",26:"*",27:"+",28:"-",29:"~",30:"!",32:"/",33:"%",36:"LEFT_OP",37:"RIGHT_OP",39:"<",40:">",41:"LE_OP",42:"GE_OP",44:"EQ_OP",45:"NE_OP",48:"^",50:"|",52:"AND_OP",54:"OR_OP",56:"?",57:":",59:"=",60:"MUL_ASSIGN",61:"DIV_ASSIGN",62:"MOD_ASSIGN",63:"ADD_ASSIGN",64:"SUB_ASSIGN",65:"LEFT_ASSIGN",66:"RIGHT_ASSIGN",67:"AND_ASSIGN",68:"XOR_ASSIGN",69:"OR_ASSIGN",73:";",80:"VOID",81:"CHAR",82:"SHORT",83:"INT",84:"LONG",85:"FLOAT",86:"DOUBLE",87:"SIGNED",88:"UNSIGNED",89:"TYPE_NAME",93:"CONST",94:"VOLATILE",100:"ELLIPSIS",104:"{",106:"}",115:"IF",116:"ELSE",117:"WHILE",118:"CONTINUE",119:"BREAK",120:"RETURN"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[10,1],[10,4],[10,3],[10,4],[10,3],[10,3],[10,2],[10,2],[13,1],[13,3],[20,1],[20,2],[20,2],[20,2],[20,2],[20,4],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[22,1],[22,4],[31,1],[31,3],[31,3],[31,3],[34,1],[34,3],[34,3],[35,1],[35,3],[35,3],[38,1],[38,3],[38,3],[38,3],[38,3],[43,1],[43,3],[43,3],[46,1],[46,3],[47,1],[47,3],[49,1],[49,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,5],[18,1],[18,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[8,1],[8,3],[70,1],[71,2],[71,3],[72,1],[72,2],[72,1],[72,2],[74,1],[74,3],[77,1],[77,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[90,2],[90,1],[90,2],[90,1],[91,1],[91,3],[92,1],[92,3],[76,1],[76,1],[78,1],[95,1],[95,3],[95,4],[95,3],[95,4],[95,4],[95,3],[98,1],[98,2],[96,1],[96,3],[99,1],[99,3],[101,2],[101,2],[101,1],[97,1],[97,3],[24,1],[24,2],[102,1],[103,3],[103,2],[103,3],[103,3],[103,4],[103,2],[103,3],[103,3],[103,4],[79,1],[79,3],[79,4],[105,1],[105,3],[107,1],[107,1],[107,1],[107,1],[107,1],[108,2],[108,3],[108,3],[108,4],[114,1],[114,2],[113,1],[113,2],[109,1],[109,2],[110,5],[110,7],[111,5],[112,2],[112,2],[112,2],[112,3],[121,1],[122,1],[123,4],[123,3],[123,3],[123,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{4:$V0,7:$V1,72:4,75:6,76:7,78:5,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,95:8,121:1,122:2,123:3},{1:[3]},{1:[2,163]},{1:[2,164]},{4:$V0,7:$V1,78:23,95:8},{71:26,72:28,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,108:25,114:24},o($Vf,[2,77],{75:6,76:7,72:29,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),o($Vf,[2,79],{75:6,76:7,72:30,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),o([9,19,59,73,80,81,82,83,84,85,86,87,88,89,93,94,104],[2,105],{7:[1,32],11:[1,31]}),o($Vg,[2,85]),o($Vg,[2,86]),o($Vg,[2,87]),o($Vg,[2,88]),o($Vg,[2,89]),o($Vg,[2,90]),o($Vg,[2,91]),o($Vg,[2,92]),o($Vg,[2,93]),o($Vg,[2,94]),o($Vg,[2,103]),o($Vg,[2,104]),o($Vh,[2,106]),{4:$V0,7:$V1,78:33,95:8},{71:26,72:28,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,108:35,114:34},{71:37,72:28,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,108:36},{1:[2,168]},o($Vi,[2,150]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,71:26,72:28,73:$Vw,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,106:[1,38],107:41,108:42,109:43,110:44,111:45,112:46,113:39,114:40,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},{4:$V0,7:$V1,73:[1,84],74:85,77:86,78:87,95:8},o($Vf,[2,78]),o($Vf,[2,80]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,12:[1,89],16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:90,70:88},{4:[1,96],9:[1,94],72:98,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,96:92,97:93,99:95,101:97},{9:[1,99]},{71:37,72:28,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,108:100},{1:[2,166]},{1:[2,167]},o($Vi,[2,151]),o($VC,[2,146]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,73:$Vw,104:$Ve,106:[1,101],107:102,108:42,109:43,110:44,111:45,112:46,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,71:37,72:28,73:$Vw,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,106:[1,103],107:41,108:42,109:43,110:44,111:45,112:46,113:104,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},o($VD,[2,152]),o($VE,[2,141]),o($VE,[2,142]),o($VE,[2,143]),o($VE,[2,144]),o($VE,[2,145]),o($VE,[2,154]),{19:$VF,73:[1,105]},{7:[1,107]},{7:[1,108]},{73:[1,109]},{73:[1,110]},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:112,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,73:[1,111]},o($VG,[2,72]),o($VH,[2,59]),o($VI,$VJ,{58:113,59:[1,114],60:[1,115],61:[1,116],62:[1,117],63:[1,118],64:[1,119],65:[1,120],66:[1,121],67:[1,122],68:[1,123],69:[1,124]}),o($VH,[2,57],{54:[1,126],56:[1,125]}),o($VK,[2,15],{7:[1,128],11:[1,127],14:[1,129],15:[1,130],16:[1,131],17:[1,132]}),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$VL,10:58,16:$Vn,17:$Vo,20:133,21:61,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$VL,10:58,16:$Vn,17:$Vo,20:135,21:61,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:136,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{3:64,4:$Vj,5:$Vk,6:$Vl,7:[1,138],10:58,16:$Vn,17:$Vo,20:137,21:61,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($VM,[2,55],{52:$VN}),o($VO,[2,5]),o($VP,[2,21]),o($VP,[2,22]),o($VP,[2,23]),o($VP,[2,24]),o($VP,[2,25]),o($VP,[2,26]),o($VQ,[2,53],{50:$VR}),o($VO,[2,1]),o($VO,[2,2]),o($VO,[2,3]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:141,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,24:142,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,75:144,76:145,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,90:143,93:$Vc,94:$Vd},o($VS,[2,51],{48:$VT}),o($VU,[2,49],{25:$VV}),o($VW,[2,47],{44:$VX,45:$VY}),o($VZ,[2,44],{39:$V_,40:$V$,41:$V01,42:$V11}),o($V21,[2,39],{36:$V31,37:$V41}),o($V51,[2,36],{27:$V61,28:$V71}),o($V81,[2,33],{26:$V91,32:$Va1,33:$Vb1}),o($VI,[2,29]),o($Vi,[2,75]),{19:[1,162],73:[1,161]},o($Vc1,[2,81]),o($Vc1,[2,83],{59:[1,163]}),{12:[1,164]},o($Vh,[2,109]),{12:[2,74]},o($VK,$VJ),{9:[1,165]},{9:[1,166],19:[1,167]},o($Vh,[2,112]),{9:[2,115],19:[1,168]},o($Vd1,[2,122]),o($Vd1,[2,117]),o($Vd1,[2,121],{95:8,78:169,102:170,103:171,4:$V0,7:$Ve1,11:$Vf1}),o($Vh,[2,107]),{1:[2,165]},o($VC,[2,147]),o($VD,[2,153]),o($VC,[2,148]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,73:$Vw,104:$Ve,106:[1,174],107:102,108:42,109:43,110:44,111:45,112:46,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},o($VE,[2,155]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,18:175,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:176,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:177,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},o($VE,[2,159]),o($VE,[2,160]),o($VE,[2,161]),{19:$VF,73:[1,178]},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,18:179,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},o($VP,[2,61]),o($VP,[2,62]),o($VP,[2,63]),o($VP,[2,64]),o($VP,[2,65]),o($VP,[2,66]),o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,71]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:180,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:181},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:182,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,9:[1,183],10:58,13:184,16:$Vn,17:$Vo,18:185,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},{4:[1,186]},{4:[1,187]},o($VO,[2,11]),o($VO,[2,12]),o($VK,[2,16]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:141,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},o($VK,[2,17]),o($VK,[2,18]),o($VK,[2,19]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:141,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,24:188,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,75:144,76:145,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,90:143,93:$Vc,94:$Vd},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:189},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:190},{9:[1,191],19:$VF},{9:[1,192]},{7:$Vg1,9:[2,124],11:$Vf1,102:193,103:171},o($Vh1,[2,96],{75:144,76:145,90:195,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),o($Vh1,[2,98],{75:144,76:145,90:196,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:197},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:198},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:199},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:200},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:201},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:202},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:203},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:204},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:205},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:206},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:207},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:208},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:209,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:210,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:211,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($Vi,[2,76]),{4:$V0,7:$V1,77:212,78:87,95:8},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,18:214,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,79:213,104:$Vi1},o($Vh,[2,108]),o($Vh,[2,110]),o($Vh,[2,111]),{4:[1,216]},{72:98,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,100:[1,217],101:218},o($Vd1,[2,119]),o($Vd1,[2,120]),o($Vd1,[2,126],{7:[1,220],11:[1,219]}),{4:$V0,7:$Ve1,9:$Vj1,11:$Vf1,72:98,75:6,76:7,78:33,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,95:8,96:223,99:95,101:97,102:221,103:171},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,12:[1,224],16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:90,70:225},o($VC,[2,149]),o($VG,[2,73]),{9:[1,226],19:$VF},{9:[1,227],19:$VF},o($VE,[2,162]),o($VH,[2,60]),{19:$VF,57:[1,228]},o($VM,[2,56],{52:$VN}),{12:[1,229],19:$VF},o($VO,[2,7]),{9:[1,230],19:[1,231]},o($Vd1,[2,13]),o($VO,[2,9]),o($VO,[2,10]),{9:[1,232]},o($VQ,[2,54],{50:$VR}),o($VS,[2,52],{48:$VT}),o($VO,[2,4]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:233,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{9:[2,125]},{7:$Vg1,9:$Vj1,11:$Vf1,72:98,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,96:223,99:95,101:97,102:221,103:171},o($Vh1,[2,95]),o($Vh1,[2,97]),o($VU,[2,50],{25:$VV}),o($VW,[2,48],{44:$VX,45:$VY}),o($VZ,[2,45],{39:$V_,40:$V$,41:$V01,42:$V11}),o($VZ,[2,46],{39:$V_,40:$V$,41:$V01,42:$V11}),o($V21,[2,40],{36:$V31,37:$V41}),o($V21,[2,41],{36:$V31,37:$V41}),o($V21,[2,42],{36:$V31,37:$V41}),o($V21,[2,43],{36:$V31,37:$V41}),o($V51,[2,37],{27:$V61,28:$V71}),o($V51,[2,38],{27:$V61,28:$V71}),o($V81,[2,34],{26:$V91,32:$Va1,33:$Vb1}),o($V81,[2,35],{26:$V91,32:$Va1,33:$Vb1}),o($VI,[2,30]),o($VI,[2,31]),o($VI,[2,32]),o($Vc1,[2,82]),o($Vc1,[2,84]),o($Vk1,[2,136]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,18:214,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,79:235,104:$Vi1,105:234},o($Vd1,[2,123]),{9:[2,116]},o($Vd1,[2,118]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,12:[1,236],16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:90,70:237},{9:[1,238],72:98,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,96:239,99:95,101:97},{9:[1,240]},o($Vl1,[2,132]),{9:[1,241]},o($Vl1,[2,128]),{12:[1,242]},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,73:$Vw,104:$Ve,107:243,108:42,109:43,110:44,111:45,112:46,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,73:$Vw,104:$Ve,107:244,108:42,109:43,110:44,111:45,112:46,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,20:91,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:245},o($VO,[2,6]),o($VO,[2,8]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,18:246,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55},o($VK,[2,20]),o($VK,[2,28]),{19:[1,248],106:[1,247]},o($Vm1,[2,139]),o($Vl1,[2,130]),{12:[1,249]},o($Vl1,[2,134]),{9:[1,250]},o($Vl1,[2,127]),o($Vl1,[2,133]),o($Vl1,[2,129]),o($VD,[2,156],{116:[1,251]}),o($VE,[2,158]),o($VH,[2,58]),o($Vd1,[2,14]),o($Vk1,[2,137]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,10:58,16:$Vn,17:$Vo,18:214,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,79:253,104:$Vi1,106:[1,252]},o($Vl1,[2,131]),o($Vl1,[2,135]),{3:64,4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:48,10:58,16:$Vn,17:$Vo,18:54,20:56,21:61,22:83,23:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:82,34:81,35:80,38:79,43:78,46:77,47:76,49:71,51:63,53:57,55:55,73:$Vw,104:$Ve,107:254,108:42,109:43,110:44,111:45,112:46,115:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB},o($Vk1,[2,138]),o($Vm1,[2,140]),o($VE,[2,157])],
defaultActions: {2:[2,163],3:[2,164],25:[2,168],35:[2,166],36:[2,167],90:[2,74],100:[2,165],193:[2,125],217:[2,116]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function comment(arg){
	console.log(arg);
}

function check_type(){
	return;
}/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:;
break;
case 1:;
break;
case 2: /* consume //-comment */ 
break;
case 3: return('AUTO'); 
break;
case 4: return('BREAK'); 
break;
case 5: return('CASE'); 
break;
case 6: return('CHAR'); 
break;
case 7: return('CONST'); 
break;
case 8: return('CONTINUE'); 
break;
case 9: return('DEFAULT'); 
break;
case 10: return('DO'); 
break;
case 11: return('DOUBLE'); 
break;
case 12: return('ELSE'); 
break;
case 13: return('ENUM'); 
break;
case 14: return('EXTERN'); 
break;
case 15: return('FLOAT'); 
break;
case 16: return('FOR'); 
break;
case 17: return('GOTO'); 
break;
case 18: return('IF'); 
break;
case 19: return('INLINE'); 
break;
case 20: comment('int'); return('INT'); 
break;
case 21: return('LONG'); 
break;
case 22: return('REGISTER'); 
break;
case 23: return('RESTRICT'); 
break;
case 24: return('RETURN'); 
break;
case 25: return('SHORT'); 
break;
case 26: return('SIGNED'); 
break;
case 27: return('SIZEOF'); 
break;
case 28: return('STATIC'); 
break;
case 29: return('STRUCT'); 
break;
case 30: return('SWITCH'); 
break;
case 31: return('TYPEDEF'); 
break;
case 32: return('UNION'); 
break;
case 33: return('UNSIGNED'); 
break;
case 34: return('VOID'); 
break;
case 35: return('VOLATILE'); 
break;
case 36: return('WHILE'); 
break;
case 37: return 5; 
break;
case 38:comment('identifier'); return "IDENTIFIER";
break;
case 39: return 6; 
break;
case 40: return 100; 
break;
case 41: return 66; 
break;
case 42: return 65; 
break;
case 43: return 63; 
break;
case 44: return 64; 
break;
case 45: return 60; 
break;
case 46: return 61; 
break;
case 47: return 62; 
break;
case 48: return 67; 
break;
case 49: return 68; 
break;
case 50: return 69; 
break;
case 51: return 37; 
break;
case 52: return 36; 
break;
case 53: return 16; 
break;
case 54: return 17; 
break;
case 55: return 15; 
break;
case 56: return 52; 
break;
case 57: return 54; 
break;
case 58: return 41; 
break;
case 59: return 42; 
break;
case 60: return 44; 
break;
case 61: return 45; 
break;
case 62: return 73; 
break;
case 63: return 104; 
break;
case 64: return 106; 
break;
case 65: return 19; 
break;
case 66: return 57; 
break;
case 67: return 59; 
break;
case 68: return 7; 
break;
case 69: return 9; 
break;
case 70: return 11; 
break;
case 71: return 12; 
break;
case 72: return 14; 
break;
case 73: return 25; 
break;
case 74: return 30; 
break;
case 75: return 29; 
break;
case 76: return 28; 
break;
case 77: return 27; 
break;
case 78: return 26; 
break;
case 79: return 32; 
break;
case 80: return 33; 
break;
case 81: return 39; 
break;
case 82: return 40; 
break;
case 83: return 48; 
break;
case 84: return 50; 
break;
case 85: return 56; 
break;
case 86:;
break;
case 87: /* discard bad characters */ 
break;
}
},
rules: [/^(?:#include *<[a-zA-Z]*\.h *>)/,/^(?:\/\*)/,/^(?:\/\/.*)/,/^(?:auto\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:extern\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:inline\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:register\b)/,/^(?:restrict\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:volatile\b)/,/^(?:while\b)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z1-9]*)/,/^(?:"(\\.|[^\\"])*")/,/^(?:\.\.\.)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c;
exports.Parser = c.Parser;
exports.parse = function () { return c.parse.apply(c, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}