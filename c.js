/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,25],$Vf=[4,7,9,11,19,73],$Vg=[4,7,9,11,19,73,80,81,82,83,84,85,86,87,88,89,93,94],$Vh=[7,9,11,19,59,73,104],$Vi=[1,68],$Vj=[1,69],$Vk=[1,70],$Vl=[1,71],$Vm=[1,55],$Vn=[1,56],$Vo=[1,58],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,43],$Vw=[1,45],$Vx=[1,46],$Vy=[1,47],$Vz=[1,48],$VA=[1,49],$VB=[1,4,5,6,7,16,17,23,25,26,27,28,29,30,73,104,106,115,116,117,118,119,120],$VC=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,104,106,115,117,118,119,120],$VD=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,80,81,82,83,84,85,86,87,88,89,93,94,104,106,115,117,118,119,120],$VE=[4,5,6,7,16,17,23,25,26,27,28,29,30,73,104,106,115,116,117,118,119,120],$VF=[1,100],$VG=[9,12,19,57,73],$VH=[9,12,19,57,73,106],$VI=[9,12,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$VJ=[2,27],$VK=[9,12,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,73,106],$VL=[1,128],$VM=[9,12,19,54,56,57,73,106],$VN=[1,133],$VO=[7,9,11,12,14,15,16,17,19,25,26,27,28,32,33,36,37,39,40,41,42,44,45,48,50,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,73,106],$VP=[4,5,6,7,16,17,23,25,26,27,28,29,30],$VQ=[9,12,19,52,54,56,57,73,106],$VR=[1,134],$VS=[9,12,19,50,52,54,56,57,73,106],$VT=[1,140],$VU=[9,12,19,48,50,52,54,56,57,73,106],$VV=[1,141],$VW=[9,12,19,25,48,50,52,54,56,57,73,106],$VX=[1,142],$VY=[1,143],$VZ=[9,12,19,25,44,45,48,50,52,54,56,57,73,106],$V_=[1,144],$V$=[1,145],$V01=[1,146],$V11=[1,147],$V21=[9,12,19,25,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$V31=[1,148],$V41=[1,149],$V51=[9,12,19,25,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$V61=[1,150],$V71=[1,151],$V81=[9,12,19,25,27,28,36,37,39,40,41,42,44,45,48,50,52,54,56,57,73,106],$V91=[1,152],$Va1=[1,153],$Vb1=[1,154],$Vc1=[9,19],$Vd1=[1,161],$Ve1=[1,162],$Vf1=[19,73],$Vg1=[1,186],$Vh1=[7,9,11],$Vi1=[1,209],$Vj1=[1,216],$Vk1=[7,9,11,19],$Vl1=[19,73,106],$Vm1=[19,106];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"CONSTANT":5,"STRING":6,"(":7,"expression":8,")":9,"postfix_expression":10,"[":11,"]":12,"argument_expression_list":13,".":14,"PTR_OP":15,"INC_OP":16,"DEC_OP":17,"assignment_expression":18,",":19,"unary_expression":20,"unary_operator":21,"cast_expression":22,"SIZEOF":23,"type_name":24,"&":25,"*":26,"+":27,"-":28,"~":29,"!":30,"multiplicative_expression":31,"/":32,"%":33,"additive_expression":34,"shift_expression":35,"LEFT_OP":36,"RIGHT_OP":37,"relational_expression":38,"<":39,">":40,"LE_OP":41,"GE_OP":42,"equality_expression":43,"EQ_OP":44,"NE_OP":45,"and_expression":46,"exclusive_or_expression":47,"^":48,"inclusive_or_expression":49,"|":50,"logical_and_expression":51,"AND_OP":52,"logical_or_expression":53,"OR_OP":54,"conditional_expression":55,"?":56,":":57,"assignment_operator":58,"=":59,"MUL_ASSIGN":60,"DIV_ASSIGN":61,"MOD_ASSIGN":62,"ADD_ASSIGN":63,"SUB_ASSIGN":64,"LEFT_ASSIGN":65,"RIGHT_ASSIGN":66,"AND_ASSIGN":67,"XOR_ASSIGN":68,"OR_ASSIGN":69,"constant_expression":70,"declaration":71,"declaration_specifiers":72,";":73,"init_declarator_list":74,"type_specifier":75,"type_qualifier":76,"init_declarator":77,"declarator":78,"initializer":79,"VOID":80,"char":81,"SHORT":82,"INT":83,"LONG":84,"FLOAT":85,"DOUBLE":86,"SIGNED":87,"UNSIGNED":88,"TYPE_NAME":89,"specifier_qualifier_list":90,"enumerator_list":91,"enumerator":92,"CONST":93,"VOLATILE":94,"direct_declarator":95,"parameter_type_list":96,"type_qualifier_list":97,"parameter_list":98,"ELLIPSIS":99,"parameter_declaration":100,"abstract_declarator":101,"identifier_list":102,"direct_abstract_declarator":103,"{":104,"initializer_list":105,"}":106,"statement":107,"compound_statement":108,"expression_statement":109,"selection_statement":110,"iteration_statement":111,"jump_statement":112,"statement_list":113,"declaration_list":114,"IF":115,"ELSE":116,"WHILE":117,"CONTINUE":118,"BREAK":119,"RETURN":120,"translation_unit":121,"external_declaration":122,"function_definition":123,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",5:"CONSTANT",6:"STRING",7:"(",9:")",11:"[",12:"]",14:".",15:"PTR_OP",16:"INC_OP",17:"DEC_OP",19:",",23:"SIZEOF",25:"&",26:"*",27:"+",28:"-",29:"~",30:"!",32:"/",33:"%",36:"LEFT_OP",37:"RIGHT_OP",39:"<",40:">",41:"LE_OP",42:"GE_OP",44:"EQ_OP",45:"NE_OP",48:"^",50:"|",52:"AND_OP",54:"OR_OP",56:"?",57:":",59:"=",60:"MUL_ASSIGN",61:"DIV_ASSIGN",62:"MOD_ASSIGN",63:"ADD_ASSIGN",64:"SUB_ASSIGN",65:"LEFT_ASSIGN",66:"RIGHT_ASSIGN",67:"AND_ASSIGN",68:"XOR_ASSIGN",69:"OR_ASSIGN",73:";",80:"VOID",81:"char",82:"SHORT",83:"INT",84:"LONG",85:"FLOAT",86:"DOUBLE",87:"SIGNED",88:"UNSIGNED",89:"TYPE_NAME",93:"CONST",94:"VOLATILE",99:"ELLIPSIS",104:"{",106:"}",115:"IF",116:"ELSE",117:"WHILE",118:"CONTINUE",119:"BREAK",120:"RETURN"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[10,1],[10,4],[10,3],[10,4],[10,3],[10,3],[10,2],[10,2],[13,1],[13,3],[20,1],[20,2],[20,2],[20,2],[20,2],[20,4],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[22,1],[22,4],[31,1],[31,3],[31,3],[31,3],[34,1],[34,3],[34,3],[35,1],[35,3],[35,3],[38,1],[38,3],[38,3],[38,3],[38,3],[43,1],[43,3],[43,3],[46,1],[46,3],[47,1],[47,3],[49,1],[49,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,5],[18,1],[18,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[8,1],[8,3],[70,1],[71,2],[71,3],[72,1],[72,2],[72,1],[72,2],[74,1],[74,3],[77,1],[77,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[90,2],[90,1],[90,2],[90,1],[91,1],[91,3],[92,1],[92,3],[76,1],[76,1],[78,1],[95,1],[95,3],[95,4],[95,3],[95,4],[95,3],[97,1],[97,2],[96,1],[96,3],[98,1],[98,3],[100,2],[100,2],[100,1],[102,1],[102,3],[24,1],[24,2],[101,1],[103,3],[103,2],[103,3],[103,3],[103,4],[103,2],[103,3],[103,3],[103,4],[79,1],[79,3],[79,4],[105,1],[105,3],[107,1],[107,1],[107,1],[107,1],[107,1],[108,2],[108,3],[108,3],[108,4],[114,1],[114,2],[113,1],[113,2],[109,1],[109,2],[110,5],[110,7],[111,5],[112,2],[112,2],[112,2],[112,3],[121,1],[122,1],[123,3],[123,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 106: case 121:
this.$ = [new node('id',yytext)];
break;
case 2:
this.$ = [new node('const',parseInt(yytext))];
break;
case 3:
this.$ = [new node('str',yytext)];
break;
case 4:

		var list = [new node('br','(')].concat($$[$0-1]);
		list.push(new node('br',')'));
		this.$ = list;
break;
case 5: case 13: case 15: case 27: case 29: case 33: case 36: case 39: case 44: case 47: case 49: case 51: case 53: case 55: case 57: case 59: case 72: case 74: case 81: case 83: case 99: case 105: case 112: case 114: case 116: case 120: case 123: case 125: case 135: case 138: case 140: case 141: case 142: case 143: case 144: case 163:
this.$ = $$[$0];
break;
case 7:
$$[$0-2].push(new node('br','('));
									$$[$0-2].push(new node('br','('));
									this.$ = $$[$0-2];
break;
case 8:
$$[$0-3].push(new node('br','('));
															this.$ = $$[$0-3].concat($$[$0-1]);
															this.$.push(new node('br',')'));
break;
case 14:
$$[$0-2].push(new node("",','));
															this.$ = $$[$0-2].concat($$[$0]);
break;
case 16: case 17:
this.$ = $$[$0];
								this.$.unshift(new node('op', $$[$0-1]));
break;
case 18:
this.$ = $$[$0];
										this.$.unshift(new node('op', $$[$0-1]));
break;
case 30:
$$[$0-2].push(new node('op', '*'));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 31:
$$[$0-2].push(new node('op', '/'));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 32:
$$[$0-2].push(new node('op', '%'));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 34:
$$[$0-2].push(new node('op', '+'));
															this.$ = $$[$0-2].concat($$[$0]);
break;
case 35:
$$[$0-2].push(new node('op', '-'));
															this.$ = $$[$0-2].concat($$[$0]);
break;
case 37: case 38: case 42: case 43: case 45: case 46:
$$[$0-2].push(new node('op', $$[$0-1]));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 40:
$$[$0-2].push(new node('op', '<'));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 41:
$$[$0-2].push(new node('op', '>'));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 48:
$$[$0-2].push(new node('op', '&'));
											this.$ = $$[$0-2].concat($$[$0]);
break;
case 50:
$$[$0-2].push(new node('op', '^'));
														this.$ = $$[$0-2].concat($$[$0]);
break;
case 52:
$$[$0-2].push(new node('op', '|'));
															this.$ = $$[$0-2].concat($$[$0]);
break;
case 54:
$$[$0-2].push(new node('op', $$[$0-1]));
																this.$ = $$[$0-2].concat($$[$0]);
break;
case 56:
$$[$0-2].push(new node('op', $$[$0-1]));
															this.$ = $$[$0-2].concat($$[$0]);
break;
case 58:
$$[$0-4].push(new node('op', '?'));
																		this.$ = $$[$0-4].concat($$[$0-2]);
																		this.$.push(new node('op', ':'));
																		this.$ = this.$.concat($$[$0]);
break;
case 60:

																	if ($$[$0-1].type == 'op') {
																		$$[$0-2].push($$[$0-1]);
																		
																	} else {
																		$$[$0-2].push(new node('op', '='));
																		$$[$0-2].push($$[$0-2][0]);
																		$$[$0-2].push(new node('op',$$[$0-1].subtype));
																	}
																	this.$ = $$[$0-2].concat($$[$0]);
break;
case 61:
this.$ = new node('op', $$[$0]);
break;
case 62:
this.$ = new node('mop', $$[$0]); this.$.subtype = '*';
break;
case 63:
this.$ = new node('mop', $$[$0]); this.$.subtype = '/';
break;
case 64:
this.$ = new node('mop', $$[$0]); this.$.subtype = '%';
break;
case 65:
this.$ = new node('mop', $$[$0]); this.$.subtype = '+';
break;
case 66:
this.$ = new node('mop', $$[$0]); this.$.subtype = '-';
break;
case 67:
this.$ = new node('mop', $$[$0]); this.$.subtype = '<<';
break;
case 68:
this.$ = new node('mop', $$[$0]); this.$.subtype = '>>';
break;
case 69:
this.$ = new node('mop', $$[$0]); this.$.subtype = '&';
break;
case 70:
this.$ = new node('mop', $$[$0]); this.$.subtype = '^';
break;
case 71:
this.$ = new node('mop', $$[$0]); this.$.subtype = '|';
break;
case 73:
$$[$0-2].push(new node('',','));
											this.$ = $$[$0-2].concat($$[$0]);
break;
case 75:
$$[$0-1].push(new node('',';'));
									this.$ = $$[$0-1];
break;
case 76:
this.$ = $$[$0-2].concat($$[$0-1]);
														this.$.push(new node('',';'));
break;
case 77: case 79: case 98: case 101: case 151:
this.$ = [$$[$0]];
break;
case 78: case 80: case 95: case 97:

		this.$ = $$[$0].unshift($$[$0-1]);
	
break;
case 82: case 117:
$$[$0-2].push(new node('',','));
												this.$ = $$[$0-2].concat($$[$0]);
break;
case 84:
$$[$0-2].push(new node('op', '='));
									this.$ = $$[$0-2].concat($$[$0]);
break;
case 85:
this.$ = new node('spec','void');
break;
case 86:
this.$ = new node('spec','char');
break;
case 87:
this.$ = new node('spec','short');
break;
case 88:
this.$ = new node('spec','int');
break;
case 96:

		this.$ = [$$[$0]];
	
break;
case 100: case 139:
$$[$0-2].push(new node('',','));
										this.$ = $$[$0-2].concat($$[$0]);
break;
case 102:
this.$ = [$$[$0-2], new node('op','=')].concat($$[$0]);
break;
case 103:
this.$ = new node('op', 'const');
break;
case 104:
this.$ = new node('op', 'volatile');
break;
case 107:
this.$ = $$[$0-1].unshift(new node('br','('));
							this.$.push(new node('br',')')); console.log(373);
break;
case 108:
console.log(374);
break;
case 109:
console.log(375);
break;
case 110:
$$[$0-3].push(new node('br','('));
														this.$ = $$[$0-3].concat($$[$0-1]);
														this.$.push(new node('br',')'));
break;
case 111:
$$[$0-2].push(new node('br','('));
									$$[$0-2].push(new node('br',')'));
									this.$ = $$[$0-2];
break;
case 113: case 118: case 119: case 124:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 115:
$$[$0-2].push(new node('',','));
									$$[$0-2].push(new node('', '...'));
									this.$ = $$[$0-2];
break;
case 122:
$$[$0-2].push(new node('',','));
										$$[$0-2].push(new node('id',$$[$0]));
										this.$ = $$[$0-2];
break;
case 136:
this.$ = [new node('br', '{')].concat($$[$0-1]);
								this.$.push(new node('br', '}'));
break;
case 145:
this.$ = new node('cmpstmt', []);
break;
case 146:
//this.$ = [new node('br', '{')].concat($$[$0-1]);
								// this.$.push(new node('br', '}'));
								this.$ = new node('cmpstmt', $$[$0-1]);
break;
case 147:
//this.$ = [new node('br', '{')].concat($$[$0-1]);
								//this.$.push(new node('br', '}'));
								this.$ = new node('cmpstmt', $$[$0-1]);
break;
case 148:
//this.$ = [new node('br', '{')].concat($$[$0-2]);
												//this.$ = this.$.concat($$[$0-1]);
												//this.$.push(new node('br', '}'));
												this.$ = new node('cmpstmt', $$[$0-2].concat($$[$0-1]));
break;
case 149:
this.$ = [new node('decstmt',$$[$0])];
break;
case 150:
this.$ = $$[$0-1];
									this.$.push(new node('decexp',$$[$0]));
break;
case 152:
this.$ = $$[$0-1];
								this.$.push($$[$0]);
break;
case 153:
this.$ = new node('expstmt', [new node('',';')]);
break;
case 154:
$$[$0-1].push(new node('',';'));
						this.$ = new node('expstmt', $$[$0-1]);
break;
case 155:

		// var list = [new node('', 'if'), new node('', '(')].concat($$[$0-2]);
		// 	list.push(new node('', ')'));
		// 	this.$ = list.concat($$[$0]);
			this.$ = new node('ifstmt',{'exp': $$[$0-2], 'if': $$[$0], 'else': {}});
	
break;
case 156:

		// var list = [new node('', 'if'), new node('', '(')].concat($$[$0-4]);
		// 	list.push(new node('', ')'));
		// 	this.$ = list.concat($$[$0-2]);
		// 	this.$.push(new node('', 'else'));
		// 	this.$ = this.$.concat($$[$0]);
		this.$ = new node('ifstmt', {'exp': $$[$0-4], 'if': $$[$0-2], 'else': $$[$0]});
	
break;
case 157:

		// var list = [new node('', 'while'), new node('', '(')].concat($$[$0-2]);
		// 	list.push(new node('', ')'));
		// 	this.$ = list.concat($$[$0]);
		this.$ = new node('whilestmt', {'exp': $$[$0-2], 'body': $$[$0]});
	
break;
case 158:
this.$ = new node('jmpstmt',	[new node('', 'continue'),new node('', ';')]);
break;
case 159:
this.$ = new node('jmpstmt',[new node('', 'break'),new node('', ';')]);
break;
case 160:
this.$ = new node('jmpstmt',[new node('', 'return'),new node('', ';')]);
break;
case 161:
var list = [new node('', 'return')].concat($$[$0-1]);
								list.push(new node('', ';'));
								this.$ = new node('jmpstmt',list);
break;
case 162:
//sTree = $$[$0];}
		syntaxTree = $$[$0];
		return $$[$0];
		
break;
case 164:
this.$ = {'type': 'function', 'proto': $$[$0-2].concat($$[$0-1]), 'ins': $$[$0]};
		// var list = $$[$0].val;
		// for(var x=0; x<list.length; x++) {
		// 	if (list[x].type == 'ifstmt') {
		// 		console.log('--------------------');
		// 		console.log(list[x].val.exp);
		// 		console.log(list[x].val.if[0]);
		// 		console.log(list[x].val.else[0]);
		// 		console.log('xxxxxxxxxxxxxxxxxxxxxxxx');
		// 	}
		// 	console.log(x,list[x]);
		// }	
	
break;
case 165:
this.$ = {'type': 'function', 'proto': $$[$0-1], 'ins': $$[$01]};
break;
}
},
table: [{4:$V0,7:$V1,72:4,75:6,76:7,78:5,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,95:8,121:1,122:2,123:3},{1:[3]},{1:[2,162]},{1:[2,163]},{4:$V0,7:$V1,78:23,95:8},{104:$Ve,108:24},o($Vf,[2,77],{75:6,76:7,72:26,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),o($Vf,[2,79],{75:6,76:7,72:27,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),o([9,19,59,73,104],[2,105],{7:[1,29],11:[1,28]}),o($Vg,[2,85]),o($Vg,[2,86]),o($Vg,[2,87]),o($Vg,[2,88]),o($Vg,[2,89]),o($Vg,[2,90]),o($Vg,[2,91]),o($Vg,[2,92]),o($Vg,[2,93]),o($Vg,[2,94]),o($Vg,[2,103]),o($Vg,[2,104]),o($Vh,[2,106]),{4:$V0,7:$V1,78:30,95:8},{104:$Ve,108:31},{1:[2,165]},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,71:36,72:42,73:$Vv,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,106:[1,32],107:35,108:37,109:38,110:39,111:40,112:41,113:33,114:34,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($Vf,[2,78]),o($Vf,[2,80]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,12:[1,81],16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:82,70:80},{9:[1,85],72:88,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,96:84,98:86,100:87},{9:[1,89]},{1:[2,164]},o($VB,[2,145]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,73:$Vv,104:$Ve,106:[1,90],107:91,108:37,109:38,110:39,111:40,112:41,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,71:94,72:42,73:$Vv,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,104:$Ve,106:[1,92],107:35,108:37,109:38,110:39,111:40,112:41,113:93,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($VC,[2,151]),o($VD,[2,149]),o($VE,[2,140]),o($VE,[2,141]),o($VE,[2,142]),o($VE,[2,143]),o($VE,[2,144]),{4:$V0,7:$V1,73:[1,95],74:96,77:97,78:98,95:8},o($VE,[2,153]),{19:$VF,73:[1,99]},{7:[1,101]},{7:[1,102]},{73:[1,103]},{73:[1,104]},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:106,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,73:[1,105]},o($VG,[2,72]),o($VH,[2,59]),o($VI,$VJ,{58:107,59:[1,108],60:[1,109],61:[1,110],62:[1,111],63:[1,112],64:[1,113],65:[1,114],66:[1,115],67:[1,116],68:[1,117],69:[1,118]}),o($VH,[2,57],{54:[1,120],56:[1,119]}),o($VK,[2,15],{7:[1,122],11:[1,121],14:[1,123],15:[1,124],16:[1,125],17:[1,126]}),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$VL,10:54,16:$Vm,17:$Vn,20:127,21:57,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$VL,10:54,16:$Vm,17:$Vn,20:129,21:57,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:130,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},{3:60,4:$Vi,5:$Vj,6:$Vk,7:[1,132],10:54,16:$Vm,17:$Vn,20:131,21:57,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},o($VM,[2,55],{52:$VN}),o($VO,[2,5]),o($VP,[2,21]),o($VP,[2,22]),o($VP,[2,23]),o($VP,[2,24]),o($VP,[2,25]),o($VP,[2,26]),o($VQ,[2,53],{50:$VR}),o($VO,[2,1]),o($VO,[2,2]),o($VO,[2,3]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:135,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,24:136,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,75:138,76:139,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,90:137,93:$Vc,94:$Vd},o($VS,[2,51],{48:$VT}),o($VU,[2,49],{25:$VV}),o($VW,[2,47],{44:$VX,45:$VY}),o($VZ,[2,44],{39:$V_,40:$V$,41:$V01,42:$V11}),o($V21,[2,39],{36:$V31,37:$V41}),o($V51,[2,36],{27:$V61,28:$V71}),o($V81,[2,33],{26:$V91,32:$Va1,33:$Vb1}),o($VI,[2,29]),{12:[1,155]},o($Vh,[2,109]),{12:[2,74]},o($VK,$VJ),{9:[1,156]},o($Vh,[2,111]),{9:[2,114],19:[1,157]},o($Vc1,[2,116]),o($Vc1,[2,120],{95:8,78:158,101:159,103:160,4:$V0,7:$Vd1,11:$Ve1}),o($Vh,[2,107]),o($VB,[2,146]),o($VC,[2,152]),o($VB,[2,147]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,73:$Vv,104:$Ve,106:[1,163],107:91,108:37,109:38,110:39,111:40,112:41,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($VD,[2,150]),o($VD,[2,75]),{19:[1,165],73:[1,164]},o($Vf1,[2,81]),o($Vf1,[2,83],{59:[1,166]}),o($VE,[2,154]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,18:167,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:168,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:169,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},o($VE,[2,158]),o($VE,[2,159]),o($VE,[2,160]),{19:$VF,73:[1,170]},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,18:171,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},o($VP,[2,61]),o($VP,[2,62]),o($VP,[2,63]),o($VP,[2,64]),o($VP,[2,65]),o($VP,[2,66]),o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,71]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:172,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:173},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:174,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,9:[1,175],10:54,13:176,16:$Vm,17:$Vn,18:177,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},{4:[1,178]},{4:[1,179]},o($VO,[2,11]),o($VO,[2,12]),o($VK,[2,16]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:135,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},o($VK,[2,17]),o($VK,[2,18]),o($VK,[2,19]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:135,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,24:180,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,75:138,76:139,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,90:137,93:$Vc,94:$Vd},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:181},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:182},{9:[1,183],19:$VF},{9:[1,184]},{7:$Vg1,9:[2,123],11:$Ve1,101:185,103:160},o($Vh1,[2,96],{75:138,76:139,90:187,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),o($Vh1,[2,98],{75:138,76:139,90:188,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd}),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:189},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:190},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:191},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:192},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:193},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:194},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:195},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:196},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:197},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:198},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:199},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:200},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:201,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:202,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:203,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},o($Vh,[2,108]),o($Vh,[2,110]),{72:88,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,99:[1,204],100:205},o($Vc1,[2,118]),o($Vc1,[2,119]),o($Vc1,[2,125],{7:[1,207],11:[1,206]}),{4:$V0,7:$Vd1,9:$Vi1,11:$Ve1,72:88,75:6,76:7,78:30,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,95:8,96:210,98:86,100:87,101:208,103:160},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,12:[1,211],16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:82,70:212},o($VB,[2,148]),o($VD,[2,76]),{4:$V0,7:$V1,77:213,78:98,95:8},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,18:215,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,79:214,104:$Vj1},o($VG,[2,73]),{9:[1,217],19:$VF},{9:[1,218],19:$VF},o($VE,[2,161]),o($VH,[2,60]),{19:$VF,57:[1,219]},o($VM,[2,56],{52:$VN}),{12:[1,220],19:$VF},o($VO,[2,7]),{9:[1,221],19:[1,222]},o($Vc1,[2,13]),o($VO,[2,9]),o($VO,[2,10]),{9:[1,223]},o($VQ,[2,54],{50:$VR}),o($VS,[2,52],{48:$VT}),o($VO,[2,4]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:224,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu},{9:[2,124]},{7:$Vg1,9:$Vi1,11:$Ve1,72:88,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,96:210,98:86,100:87,101:208,103:160},o($Vh1,[2,95]),o($Vh1,[2,97]),o($VU,[2,50],{25:$VV}),o($VW,[2,48],{44:$VX,45:$VY}),o($VZ,[2,45],{39:$V_,40:$V$,41:$V01,42:$V11}),o($VZ,[2,46],{39:$V_,40:$V$,41:$V01,42:$V11}),o($V21,[2,40],{36:$V31,37:$V41}),o($V21,[2,41],{36:$V31,37:$V41}),o($V21,[2,42],{36:$V31,37:$V41}),o($V21,[2,43],{36:$V31,37:$V41}),o($V51,[2,37],{27:$V61,28:$V71}),o($V51,[2,38],{27:$V61,28:$V71}),o($V81,[2,34],{26:$V91,32:$Va1,33:$Vb1}),o($V81,[2,35],{26:$V91,32:$Va1,33:$Vb1}),o($VI,[2,30]),o($VI,[2,31]),o($VI,[2,32]),{9:[2,115]},o($Vc1,[2,117]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,12:[1,225],16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:82,70:226},{9:[1,227],72:88,75:6,76:7,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8,87:$V9,88:$Va,89:$Vb,93:$Vc,94:$Vd,96:228,98:86,100:87},{9:[1,229]},o($Vk1,[2,131]),{9:[1,230]},o($Vk1,[2,127]),{12:[1,231]},o($Vf1,[2,82]),o($Vf1,[2,84]),o($Vl1,[2,135]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,18:215,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,79:233,104:$Vj1,105:232},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,73:$Vv,104:$Ve,107:234,108:37,109:38,110:39,111:40,112:41,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,73:$Vv,104:$Ve,107:235,108:37,109:38,110:39,111:40,112:41,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,20:83,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:236},o($VO,[2,6]),o($VO,[2,8]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,18:237,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51},o($VK,[2,20]),o($VK,[2,28]),o($Vk1,[2,129]),{12:[1,238]},o($Vk1,[2,133]),{9:[1,239]},o($Vk1,[2,126]),o($Vk1,[2,132]),o($Vk1,[2,128]),{19:[1,241],106:[1,240]},o($Vm1,[2,138]),o($VC,[2,155],{116:[1,242]}),o($VE,[2,157]),o($VH,[2,58]),o($Vc1,[2,14]),o($Vk1,[2,130]),o($Vk1,[2,134]),o($Vl1,[2,136]),{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,10:54,16:$Vm,17:$Vn,18:215,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,79:244,104:$Vj1,106:[1,243]},{3:60,4:$Vi,5:$Vj,6:$Vk,7:$Vl,8:44,10:54,16:$Vm,17:$Vn,18:50,20:52,21:57,22:79,23:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:78,34:77,35:76,38:75,43:74,46:73,47:72,49:67,51:59,53:53,55:51,73:$Vv,104:$Ve,107:245,108:37,109:38,110:39,111:40,112:41,115:$Vw,117:$Vx,118:$Vy,119:$Vz,120:$VA},o($Vl1,[2,137]),o($Vm1,[2,139]),o($VE,[2,156])],
defaultActions: {2:[2,162],3:[2,163],24:[2,165],31:[2,164],82:[2,74],185:[2,124],204:[2,115]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var node = function(x,y) {
	this.type = x;
	this.val = y;
};

function comment(arg){
	console.log(arg);
}/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:;
break;
case 1:;
break;
case 2: /* consume //-comment */ 
break;
case 3: return('AUTO'); 
break;
case 4: return('BREAK'); 
break;
case 5: return('CASE'); 
break;
case 6: return('CHAR'); 
break;
case 7: return('CONST'); 
break;
case 8: return('CONTINUE'); 
break;
case 9: return('DEFAULT'); 
break;
case 10: return('DO'); 
break;
case 11: return('DOUBLE'); 
break;
case 12: return('ELSE'); 
break;
case 13: return('ENUM'); 
break;
case 14: return('EXTERN'); 
break;
case 15: return('FLOAT'); 
break;
case 16: return('FOR'); 
break;
case 17: return('GOTO'); 
break;
case 18: return('IF'); 
break;
case 19: return('INLINE'); 
break;
case 20: return('INT'); 
break;
case 21: return('LONG'); 
break;
case 22: return('REGISTER'); 
break;
case 23: return('RESTRICT'); 
break;
case 24: return('RETURN'); 
break;
case 25: return('SHORT'); 
break;
case 26: return('SIGNED'); 
break;
case 27: return('SIZEOF'); 
break;
case 28: return('STATIC'); 
break;
case 29: return('STRUCT'); 
break;
case 30: return('SWITCH'); 
break;
case 31: return('TYPEDEF'); 
break;
case 32: return('UNION'); 
break;
case 33: return('UNSIGNED'); 
break;
case 34: return('VOID'); 
break;
case 35: return('VOLATILE'); 
break;
case 36: return('WHILE'); 
break;
case 37: return "IDENTIFIER";
break;
case 38: return 6; 
break;
case 39: return 99; 
break;
case 40: return 66; 
break;
case 41: return 65; 
break;
case 42: return 63; 
break;
case 43: return 64; 
break;
case 44: return 60; 
break;
case 45: return 61; 
break;
case 46: return 62; 
break;
case 47: return 67; 
break;
case 48: return 68; 
break;
case 49: return 69; 
break;
case 50: return 37; 
break;
case 51: return 36; 
break;
case 52: return 16; 
break;
case 53: return 17; 
break;
case 54: return 15; 
break;
case 55: return 52; 
break;
case 56: return 54; 
break;
case 57: return 41; 
break;
case 58: return 42; 
break;
case 59: return 44; 
break;
case 60: return 45; 
break;
case 61: return 73; 
break;
case 62: return 104; 
break;
case 63: return 106; 
break;
case 64: return 19; 
break;
case 65: return 57; 
break;
case 66: return 59; 
break;
case 67: return 7; 
break;
case 68: return 9; 
break;
case 69: return 11; 
break;
case 70: return 12; 
break;
case 71: return 14; 
break;
case 72: return 25; 
break;
case 73: return 30; 
break;
case 74: return 29; 
break;
case 75: return 28; 
break;
case 76: return 27; 
break;
case 77: return 26; 
break;
case 78: return 32; 
break;
case 79: return 33; 
break;
case 80: return 39; 
break;
case 81: return 40; 
break;
case 82: return 48; 
break;
case 83: return 50; 
break;
case 84: return 56; 
break;
case 85: return 5; 
break;
case 86:;
break;
case 87: /* discard bad characters */ 
break;
}
},
rules: [/^(?:#include *<[a-zA-Z]*\.h *>)/,/^(?:\/\*)/,/^(?:\/\/.*)/,/^(?:auto\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:extern\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:inline\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:register\b)/,/^(?:restrict\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:volatile\b)/,/^(?:while\b)/,/^(?:[a-zA-Z_][a-zA-Z1-9]*)/,/^(?:"(\\.|[^\\"])*")/,/^(?:\.\.\.)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[-\+]?[0-9]+)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


// if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
// exports.parser = c;
// exports.Parser = c.Parser;
// exports.parse = function () { return c.parse.apply(c, arguments); };
// exports.main = function commonjsMain(args) {
//     if (!args[1]) {
//         console.log('Usage: '+args[0]+' FILE');
//         process.exit(1);
//     }
//     var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
//     return exports.parser.parse(source);
// };
// if (typeof module !== 'undefined' && require.main === module) {
//   exports.main(process.argv.slice(1));
// }
// }